.include "m8def.inc"


.DSEG
intcnt_l: .BYTE 1 ; interrupt counter 
intcnt_f: .BYTE 1 ; interrupt counter start/stop flag

.CSEG

rjmp prog_main ; Reset Handler
rjmp irq0_isr ; IRQ0 Handler
reti ; IRQ1 Handler
reti ; Timer2 Compare Handler
reti ; Timer2 Overflow Handler
reti ; Timer1 Capture Handler
reti ; Timer1 CompareA Handler
reti ; Timer1 CompareB Handler
reti ; Timer1 Overflow Handler
rjmp timer0_isr ; Timer0 Overflow Handler
reti ; SPI Transfer Complete Handler
reti ; USART RX Complete Handler
reti ; UDR Empty Handler
reti ; USART TX Complete Handler
reti ; ADC Conversion Complete Handler
reti ; EEPROM Ready Handler
reti ; Analog Comparator Handler
reti ; Two-wire Serial Interface Handler
reti ; Store Program Memory Ready Handler

.equ t0_c = -2
.def dispout = r24


; config: 
; PORTB 2 (PIN 16) - SDATA (4)
; PORTB 5 (PIN 19) - RESET (1)
; PORTB 1 (PIN 15) - CS (2)
; PORTB 3 (PIN 17) - SCLK

irq0_isr:
	push zl
	push zh
	push r16

rjmp irq0_isr_end


	;falling edge - allow counting of interrupt if intcnt_f = 1

	ldi zl,low( intcnt_f )
	ldi zh,high( intcnt_f )
	cpi r16,0x01
	brne irq0_isr_end
	ldi r16,0
	st Z, r16

irq0_isr_end:
	pop r16
	pop zh
	pop zl

reti

timer0_isr:
	push zl
	push zh
	push r24


rjmp timer0_isr_reload


	ldi zl,low( intcnt_f )
	ldi zh,high( intcnt_f )
	ld r24,Z
	tst r24
	brne timer0_isr_reload
	
	; counting allowed, checking if IR is low
	in r24,PIND
	andi r24,0b00000100
	breq timer0_do_count

	; if high on int0, stop counting
	ldi r24,0x02
	st Z, r24
	rjmp timer0_isr_reload

timer0_do_count:
	ldi zl,low( intcnt_l )
	ldi zh,high( intcnt_l )

	ld r24,Z
	inc r24
	st Z, r24

timer0_isr_reload:

	ldi r24,t0_c ; counting up to 2, 8 Mhz/1024/2  
	out TCNT0, r24
	
	pop r24
	pop zh
	pop zl

timer0_isr_end:
	reti

.include "lcd3510i.inc"

.include "chargen.inc"

prog_main:
	cli
	ldi r16,high(RAMEND); Main program start
	out SPH,r16 ; Set Stack Pointer to top of RAM
	ldi r16,low(RAMEND)
	out SPL,r16

	ldi r16, 0b00101110
	out DDRB, r16 ; 

	;ldi r16,5 ; in clock / 1024
	ldi r16,4
	out TCCR0, r16

	ldi r16,t0_c ; counting up to 2, 8 Mhz/1024/2  
	out TCNT0, r16

	ldi r16, (1<<TOIE0)
	out TIMSK, r16

	ldi r16, 0b10001010 ; enable sleep, idle, interrupts of falling edge
	out MCUCR, r16

	ldi r16, 0b01000000 ; enable int0
	out GICR, r16

	ldi r16,0 ; clearing interrupt flags
	out GIFR, r16

	;prepare port D reg, we need d2 pin,int 0
	ldi r16,0
	out DDRD,r16
	ldi r16,0xFF
	out PORTD,r16


	; deny counting of interrupt
	ldi zl,low( intcnt_f )
	ldi zh,high( intcnt_f )
	ldi r24,0x01
	st Z, r24

	rcall lcd_init

	ldi r20,1
	ldi r21,6
	ldi r22,1
	ldi r23,20
	;r20 - start x
	;r21 - width
	;r22 - start y
	;r23 - height
	;rcall displ_set_cell

	;rcall put_char_test

	; r25 - start col
	; r24 - width 
	; r23 - page
	; r22 - height
	; r21 - color


	ldi r25, 0
	ldi r24, 10
	ldi r23, 5
	ldi r22, 10
	ldi r21, 0b11111100
	rcall color_square_rel

	ldi r25, 11
	ldi r24, 10
	ldi r23, 5
	ldi r22, 20
	ldi r21,0b00011111
	rcall color_square_rel



	sei
mainloop:	
	;sleep

	ldi zl,low( intcnt_f )
	ldi zh,high( intcnt_f )
	ld r24, Z



	ldi r20,4
	ldi r21,4
	ldi r22, 0b00000000
	ldi r23, 0b11100011
	rcall put_char_hex


	cpi r24,0x02

	brne mainloop

	;r20 - pos x in char positions
	;r21 - pos y in char positions
	;r22 - backgruond color
	;r23 - char color
	;r24 - char code
	ldi r20, 6
	ldi r21, 6
	ldi r22, 0b00000000
	ldi r23, 0b11100011
	ldi r24, 'R'
	;rcall put_char


	ldi zl,low( intcnt_l )
	ldi zh,high( intcnt_l )
	ld r24, Z

	ldi r20,1
	ldi r21,1
	ldi r22, 0b00000000
	ldi r23, 0b11100011
	;mov r24,r4
	;rcall put_char_hex

lll:
	rjmp lll




